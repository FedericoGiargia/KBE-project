import os
from datetime import datetime
from fpdf import FPDF
from dataclasses import dataclass, field
from typing import List, Any, Dict

# Default text templates
DEFAULT_PROGRAM_DESCRIPTION = (
    'This report was generated by ConvAera, which interfaces with AVL to perform aerodynamic analysis'
    ' on aircraft geometries. It computes lift-to-drag ratios, total lift, and other performance metrics.'
)
DEFAULT_PARAMETERS_TEMPLATE = (
    'The analysis was run at a fixed angle of attack (AoA) of {AoA} degrees and then trimmed for '
    'zero pitching moment. Computed values: L/D_fixed={L_D_fixed}, total lift={Total_Lift_fixed}.'
)

@dataclass
class ReportConfig:
    """
    Configuration for generating a PDF report.

    Pass in your analysis data object, which can be a dict or have attributes.
    """
    filename: str
    title: str
    data_object: Any  # analysis object or dict containing parameters
    image_files: List[str] = field(default_factory=list)
    image_captions: List[str] = field(default_factory=list)
    output_dir: str = ''
    program_description: str = DEFAULT_PROGRAM_DESCRIPTION
    parameters_template: str = DEFAULT_PARAMETERS_TEMPLATE

    def get_data_dict(self) -> Dict[str, Any]:
        """
        Returns a dict of parameter names to values for templating and table.
        """
        if isinstance(self.data_object, dict):
            return self.data_object
        # try to convert attributes to dict
        return {key: getattr(self.data_object, key) for key in dir(self.data_object)
                if not key.startswith('_') and not callable(getattr(self.data_object, key))}

class PDFReport(FPDF):
    """
    PDF with header/footer, skipping cover page.
    """
    def __init__(self, title: str):
        super().__init__()
        self.title = title

    def header(self):
        if self.page_no() == 1:
            return
        self.set_font('Arial', 'B', 15)
        title_w = self.get_string_width(self.title) + 6
        self.set_x((self.w - title_w) / 2)
        self.cell(title_w, 10, self.title, ln=True, align='C')
        self.ln(5)

    def footer(self):
        if self.page_no() == 1:
            return
        self.set_y(-15)
        self.set_font('Arial', 'I', 8)
        page_text = f'Page {self.page_no()}/{{nb}}'
        self.cell(0, 10, page_text, align='C')


def create_pdf_report(config: ReportConfig) -> None:
    """
    Generates a PDF report based on ReportConfig.
    """
    # Prepare output path
    if config.output_dir:
        os.makedirs(config.output_dir, exist_ok=True)
        output_path = os.path.join(config.output_dir, config.filename)
    else:
        output_path = config.filename

    # Extract data dict
    data = config.get_data_dict()

    pdf = PDFReport(config.title)
    pdf.alias_nb_pages()
    pdf.set_auto_page_break(auto=True, margin=15)

    # Cover page
    pdf.add_page()
    pdf.set_font('Arial', 'B', 24)
    pdf.ln(40)
    pdf.cell(0, 10, config.title, ln=True, align='C')
    pdf.ln(10)
    pdf.set_font('Arial', '', 14)
    date_str = datetime.now().strftime('%B %d, %Y')
    pdf.cell(0, 10, f'Date: {date_str}', ln=True, align='C')
    pdf.ln(20)
    pdf.set_font('Arial', 'I', 12)
    pdf.multi_cell(0, 8, config.program_description, align='J')

    # Introduction & Parameters
    pdf.add_page()
    pdf.set_font('Arial', 'B', 16)
    pdf.cell(0, 10, 'Introduction', ln=True)
    pdf.ln(5)
    pdf.set_font('Arial', '', 12)
    pdf.multi_cell(0, 8, config.program_description, align='J')
    pdf.ln(10)
    pdf.set_font('Arial', 'B', 16)
    pdf.cell(0, 10, 'Chosen Parameters', ln=True)
    pdf.ln(5)
    pdf.set_font('Arial', '', 12)
    # Format parameters description
    params_text = config.parameters_template.format(**data)
    pdf.multi_cell(0, 8, params_text, align='J')

    # Images
    for idx, img in enumerate(config.image_files):
        pdf.add_page()
        try:
            usable_width = pdf.w - pdf.l_margin - pdf.r_margin
            pdf.image(img, w=usable_width)
            pdf.ln(5)
        except RuntimeError:
            pdf.set_font('Arial', 'I', 10)
            pdf.cell(0, 8, f"[Could not load image: {img}]")
            pdf.ln(5)
        caption = config.image_captions[idx] if idx < len(config.image_captions) else ''
        pdf.set_font('Arial', 'I', 11)
        pdf.multi_cell(0, 6, caption, align='C')

    # Results table
    pdf.add_page()
    pdf.set_font('Arial', 'B', 14)
    pdf.cell(0, 10, 'Results', ln=True)
    pdf.ln(5)
    usable_width = pdf.w - pdf.l_margin - pdf.r_margin
    col_width = usable_width / 2
    row_height = pdf.font_size * 2
    pdf.set_fill_color(200, 200, 200)
    pdf.set_font('Arial', 'B', 12)
    pdf.cell(col_width, row_height, 'Parameter', border=1, fill=True)
    pdf.cell(col_width, row_height, 'Value', border=1, fill=True, ln=True)
    pdf.set_font('Arial', '', 12)
    for key, val in data.items():
        pdf.cell(col_width, row_height, str(key), border=1)
        pdf.cell(col_width, row_height, str(val), border=1, ln=True)

    # Save
    pdf.output(output_path)